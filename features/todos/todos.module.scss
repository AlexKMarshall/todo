.appContent {
  --gutter: var(--s1);
  flex: 1;
  height: 0; /* otherwise 1fr grid row doesn't grow in chrome,
  but this seems to mean the height doesn't respect the content when it overflows and so we don't get the bottom margin*/
  display: grid;
  width: 100%;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: auto 1fr auto auto;
  grid-template-areas:
    'input input'
    'list list'
    'count clear'
    'filters filters';

  @media (min-width: 800px) {
    grid-template-columns: minmax(max-content, 1fr) auto minmax(
        max-content,
        1fr
      );
    grid-template-rows: auto 1fr auto;
    grid-template-areas:
      'input input input'
      'list list list'
      'count filters clear';
  }
}

.appContent > * {
  background-color: var(--main-background-color);
}

.todoForm {
  grid-area: input;
  display: flex;
  align-items: center;
  margin-bottom: var(--gutter);
  border-radius: var(--border-radius);

  box-shadow: 0 0 30px 0px var(--shadow-color);

  position: relative;
  &::before {
    content: '';
    position: absolute;
    top: 0;
    right: 20%;
    bottom: 0;
    left: 20%;
    box-shadow: 0 0 50px 10px var(--shadow-color);
    z-index: -1;
  }

  &:focus-within {
    box-shadow: 0 0 30px 0px var(--shadow-color),
      0 0 4px 1px var(--strong-text-color);
  }
}

.backgroundShadow {
  grid-row: 2 / 4;
  grid-column: 1 / -1;
  border-radius: var(--border-radius);

  box-shadow: 0 0 30px 0px var(--shadow-color);
  z-index: -1;

  position: relative;
  &::before {
    content: '';
    position: absolute;
    border-radius: var(--border-radius);
    top: 0;
    right: 20%;
    bottom: 0;
    left: 20%;
    box-shadow: 0 0 50px 10px var(--shadow-color);
    z-index: -1;
  }
}

.smallText {
  font-size: max(var(--s-1), 15px);
}

.itemsCount {
  composes: smallText;

  grid-area: count;
  border-bottom-left-radius: 4px;
  padding: var(--s0) var(--s1);
  color: var(--muted-text-color);
}

.filterLinks {
  composes: smallText;
  grid-area: filters;
  margin-top: var(--gutter);
  padding: var(--s0) var(--s1);
  border-radius: var(--border-radius);
  display: flex;
  gap: var(--s0);
  justify-content: center;
  font-weight: 700;

  box-shadow: 0 0 30px 0px var(--shadow-color);

  position: relative;
  &::before {
    content: '';
    position: absolute;
    top: 0;
    right: 20%;
    bottom: 0;
    left: 20%;
    box-shadow: 0 0 50px 10px var(--shadow-color);
    z-index: -1;
  }

  @media (min-width: 800px) {
    margin-top: 0;
    box-shadow: none;
    &::before {
      content: none;
    }
  }
}

.clearCompleted {
  composes: smallText;

  grid-area: clear;
  display: flex;
  justify-content: flex-end;
  padding: var(--s0) var(--s1);
  border-bottom-right-radius: var(--border-radius);
  color: var(--muted-text-color);
}

.todoList {
  grid-area: list;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  border-top-left-radius: var(--border-radius);
  border-top-right-radius: var(--border-radius);

  & > :first-child {
    // TODO avoid this workaround?
    border-top-left-radius: var(--border-radius);
    border-top-right-radius: var(--border-radius);
  }

  & > * {
    border-bottom: 1px solid var(--divider-color);
  }
}

.emptyMessage {
  grid-area: list;
  border-top-left-radius: 4px;
  border-top-right-radius: 4px;
  padding: var(--s0) var(--s1);
  color: var(--muted-text-color);
}

.todoItem {
  padding: var(--s0) var(--s1);
  overflow: hidden;
  // we need this for animating in the todo so the item isn't see-through
  background-color: var(--main-background-color);

  & > span {
    display: flex;
    align-items: center;
  }
}
